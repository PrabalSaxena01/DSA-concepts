class Solution {
public:
    int maximumCount(vector<int>& nums) {
        int n = nums.size();
        int neg = 0, pos = 0;

        for (int num : nums) {
            if (num < 0) neg++;
            else if (num > 0) pos++;
        }

        return max(pos, neg);
    }
};

//Binary Search
class Solution {
public:
    int maximumCount(vector<int>& nums) {
        int n = nums.size();

        int left = 0, right = n - 1, posi = n;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] > 0) {
                posi = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        left = 0, right = n - 1;
        int negi = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] < 0) {
                negi = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        int pos = (posi == n) ? 0 : n - posi;
        int neg = negi + 1;

        return max(pos, neg);
    }
};
