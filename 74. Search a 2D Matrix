class Solution {
public:
    int index(int a, int b, int r) {
        return (a * r) + b;
    }

    vector<int> mat(int temp, int r) {
        int p = temp / r;
        int q = temp % r;
        return {p, q};
    }

    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int rsize = matrix[0].size();
        int csize = matrix.size();

        int a = 0, b = 0;
        int k = csize - 1, l = rsize - 1; 
        int lowIdx = index(a, b, rsize);
        int highIdx = index(k, l, rsize);

        while (lowIdx <= highIdx) {  
            int midIdx = lowIdx + (highIdx - lowIdx) / 2;
            vector<int> midPos = mat(midIdx, rsize);
            int p = midPos[0], q = midPos[1];

            int midVal = matrix[p][q];

            if (midVal == target) {
                return true;
            } else if (midVal < target) {
                lowIdx = midIdx + 1;
            } else {
                highIdx = midIdx - 1;
            }
        }
        return false;
    }
};
