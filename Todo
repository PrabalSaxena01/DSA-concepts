#include <stack>
#include <unordered_map>
#include <string>
using namespace std;

class Solution {
public:
    bool isValid(string s) {
        // Map to store matching pairs
        unordered_map<char, char> matching = {
            {')', '('},
            {'}', '{'},
            {']', '['}
        };

        stack<char> st; // Stack to store open brackets

        for (char c : s) {
            // If it's a closing bracket
            if (matching.count(c)) {
                // Check if the stack is not empty and top matches the current closing bracket
                if (!st.empty() && st.top() == matching[c]) {
                    st.pop(); // Valid pair found, pop the top
                } else {
                    return false; // Mismatch or unbalanced bracket
                }
            } else {
                // It's an opening bracket, push onto the stack
                st.push(c);
            }
        }

        // If the stack is empty, all brackets were matched
        return st.empty();
    }
};
