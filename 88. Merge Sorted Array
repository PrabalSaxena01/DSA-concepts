// Optimized solution
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
       
        int a, b, c;
        a = m - 1;
        b = n - 1;
        c = m + n - 1;
        while (a >= 0 && b >= 0) {
            if (nums1[a] > nums2[b]) {
                nums1[c] = nums1[a];
                a--;
                c--;
            } else {
                nums1[c] = nums2[b];
                b--;
                c--;
            }
        }
        for (; a >= 0; a--) {
            nums1[c--] = nums1[a];
        }
        for (; b >= 0; b--) {
            nums1[c--] = nums2[b];
        }
    }
};

//better solution
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        nums1.resize(m);
        for(int i = 0;i<n;i++){
            nums1.push_back(nums2[i]);
        }
        sort(nums1.begin(),nums1.end());
    }
};
best solution
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        nums1.resize(m);
        nums1.insert(nums1.begin(), nums2.begin(), nums2.end());
        sort(nums1.begin(), nums1.end());
    }
};
